% To run it, load an existing emg MAT file
load('<filepath>\CFL9_saline_2022-05-12 15-00-18_processed_analysis.mat')
% Result: emgData, peakData and the others are loaded

% Get the encoder CSV file (I have already run the python script to read the txt and create csv
% Should be in the same location as the encoder txt
encoderFPath = '/Volumes/mnledata/AYESHA_THANAWALLA/U19/CFL12/03282022_CNO_data/CFL12_CNO_CoolTerm Capture 2022-03-28 16-10-59.csv'
% Parse the csv and save as 
trialMetadata = parseEncoderEMGKinematic('/Volumes/mnledata/AYESHA_THANAWALLA/U19/CFL12/03282022_CNO_data/CFL12_CNO_CoolTerm Capture 2022-03-28 16-10-59.csv');

% Align emg with kinematic
emgDataAligned = emgAligntoKinematicRecording(emgData, trialMetadata); % aligns to encoder data

% Run peak data
% Some basic config
channels = {'bi_R','tri_R','bi_L','tri_L'};
segments = {'data_raw', 'data_smooth'};
filterConfig = struct('filterType', 'iir',...
	'segments', {'data_raw'},...
	'filterSegmentName', 'data_filtered',...
	'passbandFrequency', [1000, 300],...
	'loFrequency', 50,...
	'filterOrder', 4,...
	'passbandRipple', 0.2);
	emgDataLabel = 'data';
	alignWithKinematic = true; 
	% filterConfig = struct('filterType', 'na');
	
emg_fs = 10000;
minPeakDistance = 200/1000;
widthReference = 'halfheight'; % See help findpeaks

[peakData, peakMetrics, peakDistances, peakAmplitudes] = emgGetPeaksFolder(emgDataAligned,...
																				   'channels', channels,...
																				   'segments', segments,...
																				   'filterConfig', filterConfig,...
																				   'minPeakDistance', minPeakDistance,...
																				   'widthReference', widthReference,...
																				   'emgDataLabel', emgDataLabel);